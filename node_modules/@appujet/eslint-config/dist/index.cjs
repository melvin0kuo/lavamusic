"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.js
var index_exports = {};
__export(index_exports, {
  default: () => config
});
module.exports = __toCommonJS(index_exports);
var augu = __toESM(require("@augu/eslint-config"), 1);
var import_js = __toESM(require("@eslint/js"), 1);
var import_eslint_plugin = __toESM(require("@stylistic/eslint-plugin"), 1);
var tsParser = __toESM(require("@typescript-eslint/parser"), 1);
var import_eslint_plugin_import_x = __toESM(require("eslint-plugin-import-x"), 1);
var import_globals = __toESM(require("globals"), 1);
var import_typescript_eslint = require("typescript-eslint");
function config(rootdir, ...additionalConfig) {
  return (0, import_typescript_eslint.config)(
    {
      ignores: ["docs/*", "dist/*", "node_modules/*"]
    },
    import_js.default.configs.recommended,
    ...import_typescript_eslint.configs.recommendedTypeChecked,
    ...import_typescript_eslint.configs.stylisticTypeChecked,
    augu.javascript(),
    import_eslint_plugin_import_x.default.flatConfigs.recommended,
    import_eslint_plugin_import_x.default.flatConfigs.typescript,
    import_eslint_plugin.default.configs["disable-legacy"],
    {
      languageOptions: {
        ecmaVersion: "latest",
        sourceType: "module",
        parser: tsParser,
        parserOptions: {
          projectService: true,
          tsconfigRootDir: rootdir
        },
        globals: {
          ...import_globals.default.nodeBuiltin,
          ...import_globals.default.builtin,
          ...import_globals.default.es2021
        }
      },
      plugins: {
        "@stylistic": import_eslint_plugin.default
      },
      rules: {
        // Stylistic rules
        "@stylistic/semi": ["error"],
        "@stylistic/member-delimiter-style": ["error"],
        "@stylistic/indent": ["error", "tab", { "SwitchCase": 1 }],
        "@stylistic/space-infix-ops": ["error"],
        "@stylistic/key-spacing": ["error", { "mode": "strict" }],
        "@stylistic/keyword-spacing": ["error"],
        "@stylistic/indent-binary-ops": ["error", 4],
        "@stylistic/type-generic-spacing": ["error"],
        "@stylistic/type-named-tuple-spacing": ["error"],
        "@stylistic/type-annotation-spacing": ["error", { "before": false, "after": true, "overrides": { "arrow": { "before": true, "after": true } } }],
        "@stylistic/quotes": ["error", "single"],
        "@stylistic/comma-dangle": ["error", "never"],
        "@stylistic/brace-style": ["error", "1tbs"],
        "@stylistic/object-curly-spacing": ["error", "always", { "objectsInObjects": false, "arraysInObjects": false }],
        "@stylistic/array-bracket-spacing": ["error", "always", { "objectsInArrays": false, "arraysInArrays": false }],
        "@stylistic/block-spacing": ["error", "always"],
        "@stylistic/arrow-spacing": "error",
        "@stylistic/switch-colon-spacing": ["error", { "after": true, "before": false }],
        "@stylistic/no-multiple-empty-lines": ["error", { "max": 1 }],
        "@stylistic/eol-last": ["warn", "always"],
        "@stylistic/no-trailing-spaces": ["warn", { "ignoreComments": true }],
        // TypeScript specific rules
        "@typescript-eslint/require-await": ["warn"],
        // Import-X rules
        "import-x/no-extraneous-dependencies": ["error"],
        "import-x/no-mutable-exports": ["warn"],
        "import-x/no-unused-modules": ["warn"],
        "import-x/no-amd": ["error"],
        "import-x/no-commonjs": ["error"],
        "import-x/no-import-module-exports": ["error"],
        "import-x/unambiguous": ["warn"],
        "import-x/no-absolute-path": ["error"],
        "import-x/no-cycle": ["error"],
        "import-x/no-relative-packages": ["error"],
        "import-x/no-self-import": ["error"],
        "import-x/no-useless-path-segments": ["warn"],
        "import-x/consistent-type-specifier-style": ["error", "prefer-top-level"],
        "import-x/extensions": ["error", "ignorePackages"],
        "import-x/first": ["warn"],
        "import-x/newline-after-import": ["warn"],
        "import-x/no-unassigned-import": ["warn"],
        "import-x/no-default-export": ["warn"],
        "import-x/order": ["warn", {
          alphabetize: { caseInsensitive: true, order: "asc" },
          groups: ["builtin", "external", "internal", "parent", "sibling"]
        }],
        // Enforce no duplicate imports
        "no-duplicate-imports": ["error"]
      }
    },
    {
      files: ["**/*.js", "**/*.cjs", "**/*.mjs"],
      rules: {
        "require-await": ["warn"],
        "no-unused-vars": ["warn"]
      }
    },
    ...additionalConfig
  );
}
//# sourceMappingURL=index.cjs.map